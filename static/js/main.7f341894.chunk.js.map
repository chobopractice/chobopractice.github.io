{"version":3,"sources":["_actions/user_actions.js","_actions/types.js","components/Config.js","hoc/auth.js","components/views/LandingPage/Sections/Datas.js","components/views/LandingPage/Sections/RadioBox.js","components/views/LandingPage/Sections/SearchFeature.js","components/views/LandingPage/LandingPage.js","components/views/LoginPage/LoginPage.js","components/views/RegisterPage/RegisterPage.js","components/views/NavBar/Sections/LeftMenu.js","components/views/NavBar/Sections/RightMenu.js","components/views/NavBar/NavBar.js","components/views/Footer/Footer.js","components/views/Quiz/Questions.js","components/views/Quiz/QuestionTest.js","components/Utils/FileUpload.js","components/Utils/AnswerFileUpload.js","components/views/UploadQuiz/UploadAnswer.js","components/views/UploadQuiz/UploadQiuz.js","components/views/DetailQuizPage/DetailQuiz.js","components/views/QuizCart/Sections/UserCardBlock.js","components/views/QuizCart/QuizCart.js","components/views/MadeQuizs/MadeQuizs.js","components/App.js","serviceWorker.js","_reducers/index.js","_reducers/user_reducer.js","index.js"],"names":["auth","type","payload","axios","get","then","response","data","SpecificComponent","option","adminRoute","AuthenticationCheck","props","user","useSelector","state","dispatch","useDispatch","useEffect","isAuth","isAdmin","history","push","quizNumValue","Panel","Collapse","RadioBox","useState","Value","setValue","defaultActiveKey","header","key","Group","onChange","event","target","value","handleFilter","list","map","_id","name","Search","Input","SearchFeature","SearchTerm","setSearchTerm","placeholder","allowClear","refreshFunction","currentTarget","style","width","Meta","Card","LandingPage","Quizs","setQuizs","Skip","setSkip","Limit","PostSize","setPostSize","Filters","setFilters","getQuiz","useCallback","body","a","post","success","loadMore","quizinfo","postSize","alert","skip","limit","renderCards","quiz","index","lg","md","xs","hoverable","cover","href","alt","images","maxHeight","src","onError","e","className","title","quizTitleValue","description","descriptionValue","filters","category","newFilters","showFilterResults","NumValues","array","parseInt","handleNumChange","margin","textAlign","gutter","display","justifyContent","newSearchTerm","searchTerm","onClick","Title","Typography","withRouter","rememberMeChecked","localStorage","getItem","formErrorMessage","setFormErrorMessage","rememberMe","setRememberMe","handleRememberMe","initialEmail","initialValues","email","password","validationSchema","Yup","shape","required","min","onSubmit","values","setSubmitting","setTimeout","dataToSubmit","loginUser","loginSuccess","window","setItem","userId","id","removeItem","catch","err","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","level","Item","prefix","UserOutlined","color","onBlur","LockOutlined","fontSize","border","padding","borderRadius","checked","float","htmlType","minWidth","disabled","formItemLayout","labelCol","span","sm","wrapperCol","tailFormItemLayout","offset","RegisterPage","lastName","confirmPassword","oneOf","lastname","image","moment","unix","registerUser","errmsg","label","hasFeedback","validateStatus","LeftMenu","mode","logoutHandler","status","userData","NavBar","visible","setVisible","position","zIndex","AlignRightOutlined","placement","closable","onClose","Footer","height","flexDirection","alignItems","Questions","questionText","answerOption","rightAnswer","QuestionTest","useHistory","questions","currentQuestion","setCurrentQuestion","showScore","setShowScore","score","setScore","progressBar","city","length","result","Math","ceil","handleAnswerButtonClick","nextQuestion","Container","Row","Col","Button","goBack","variant","size","ProgressBar","animated","now","i","FileUpload","Image","setImage","onDrop","files","formData","FormData","append","filePath","getRootProps","getInputProps","PlusOutlined","overflowX","AnswerFileUpload","answerImage","setanswerImage","answerformData","useDropzone","maxFiles","accept","TablePaginationActions","theme","useTheme","count","page","rowsPerPage","onPageChange","Box","sx","flexShrink","ml","IconButton","aria-label","direction","max","UploadAnswer","rightanswer","setRightAnswer","AnswerTable","setAnswerTable","quizimage","setQuizimage","Quizquestion","setQuizquestion","first","setFirst","second","setSecond","third","setThird","fourth","setFourth","nextKey","useRef","setPage","setRowsPerPage","emptyRows","newImages","uuid","QuestionList","current","quizquestion","TableContainer","component","Paper","Table","TableHead","TableCell","align","TableBody","slice","row","TableRow","hover","maxWidth","currentIndex","indexOf","newAnswerTable","splice","deleteHandler","colSpan","TableFooter","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","newPage","onRowsPerPageChange","ActionsComponent","TextArea","TabPane","Tabs","callback","UploadQuiz","QuizTitleValue","setQuizTitleValue","DescriptionValue","setDescriptionValue","QuizNumValue","setQuizNumValue","Images","setImages","ResultImage","setResultImage","ResultMessage100","setResultMessage100","ResultMessage80","setResultMessage80","ResultMessage60","setResultMessage60","ResultMessage40","setResultMessage40","ResultMessage0","setResultMessage0","QuestionListNumber","tab","marginBottom","writer","answer","resultImage","resultMessage100","resultMessage80","resultMessage60","resultMessage40","resultMessage0","Axios","DetailQuiz","setQuestions","QuesionsQuiz","setQuestionsQuiz","QuestionsNumber","setQuestionsNumber","Result100","setResult100","Result80","setResult80","Result60","setResult60","Result40","setResult40","Result0","setResult0","firstPage","setFirstPage","showResult","setShowResult","QuestionImg","setQuestionImg","wrongLists","setWrongLists","quizId","match","params","item","sort","random","wrongAnswerlist","wrongquestionlist","newwrongList","dispath","cartAddHandler","addToCart","AnswerComponent","ResultGraphic","wrongList","answ","UserCardBlock","quizs","QuizCart","emptysomething","setemptysomething","cartItems","cart","forEach","userCart","getCartItems","cartDetail","removeCartItem","MadeQuizs","App","fallback","paddingTop","minHeight","exact","path","Auth","LoginPage","Boolean","location","hostname","rootReducer","combineReducers","action","register","loginSucces","createStoreWithMiddleware","applyMiddleware","promiseMiddleware","ReduxThunk","createStore","ReactDOM","render","store","Reducer","__REDUX_DEVTOOLS_EXTENSION__","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f341894.chunk.js","sourcesContent":["import axios from 'axios';\nimport {\n    LOGIN_USER,\n    REGISTER_USER,\n    AUTH_USER,\n    LOGOUT_USER,\n    ADD_TO_CART,\n    GET_CART_ITEMS,\n    REMOVE_CART_ITEM,\n} from './types';\nimport { USER_SERVER } from '../components/Config.js';\n\nexport function registerUser(dataToSubmit) {\n    const request = axios.post(`${USER_SERVER}/register`, dataToSubmit)\n        .then(response => response.data);\n\n    return {\n        type: REGISTER_USER,\n        payload: request\n    }\n}\n\nexport function loginUser(dataToSubmit) {\n    const request = axios.post(`${USER_SERVER}/login`, dataToSubmit)\n        .then(response => response.data);\n\n    return {\n        type: LOGIN_USER,\n        payload: request\n    }\n}\n\nexport function auth() {\n    const request = axios.get(`${USER_SERVER}/auth`)\n        .then(response => response.data);\n\n    return {\n        type: AUTH_USER,\n        payload: request\n    }\n}\n\nexport function logoutUser() {\n    const request = axios.get(`${USER_SERVER}/logout`)\n        .then(response => response.data);\n\n    return {\n        type: LOGOUT_USER,\n        payload: request\n    }\n}\n\nexport function addToCart(id) {\n    let body = {\n        quizId: id\n    }\n    const request = axios.post(`${USER_SERVER}/addToCart`, body)\n        .then(response => response.data);\n\n    return {\n        type: ADD_TO_CART,\n        payload: request\n    }\n}\n\nexport function getCartItems(cartItems, userCart) {\n\n    const request = axios.get(`/api/quiz/quizs_by_id?id=${cartItems}&type=array`)\n        .then(response => response.data);\n    // CartItem에 해당하는 정보들을 가져오고 Quantity 정보를 넣어준다.\n\n    return {\n        type: GET_CART_ITEMS,\n        payload: request\n    }\n}\n\nexport function removeCartItem(quizId) {\n\n    const request = axios.get(`/api/users/removeFromCart?id=${quizId}`)\n        .then(response => {\n            response.data.cart.forEach(item=>{\n                response.data.quizinfo.forEach((quiz, index)=>{\n                    if (item.id === quiz._id){\n                        response.data.quizinfo[index] = item\n                    }\n                })\n            })\n            return response.data\n        });\n\n\n    return {\n        type: REMOVE_CART_ITEM,\n        payload: request\n    }\n}\n\n\n// export function addToHistory(id) {\n//     let body = {\n//         quizId: id\n//     }\n//     const request = axios.post(`${USER_SERVER}/addToHistory`, body)\n//         .then(response => response.data);\n\n//     return {\n//         type: ADD_TO_HISTORY,\n//         payload: request\n//     }\n// }\n","export const LOGIN_USER = 'login_user';\nexport const REGISTER_USER = 'register_user';\nexport const AUTH_USER = 'auth_user';\nexport const LOGOUT_USER = 'logout_user';\nexport const ADD_TO_CART = 'add_to_cart';\nexport const GET_CART_ITEMS = 'get_cart_items';\nexport const REMOVE_CART_ITEM = 'remove_cart_item';\nexport const ADD_TO_HISTORY = 'add_to_history';","//SERVER ROUTES\nexport const USER_SERVER = '/api/users';\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport { auth } from '../_actions/user_actions';\nimport { useSelector, useDispatch } from \"react-redux\";\n\nexport default function (SpecificComponent, option, adminRoute = null) {\n    function AuthenticationCheck(props) {\n\n        let user = useSelector(state => state.user);\n        const dispatch = useDispatch();\n\n        useEffect(() => {\n            //To know my current status, send Auth request \n            dispatch(auth()).then(response => {\n                //Not Loggined in Status \n                if (!response.payload.isAuth) {\n                    if (option) {\n                        props.history.push('/login')\n                    }\n                    //Loggined in Status \n                } else {\n                    //supposed to be Admin page, but not admin person wants to go inside\n                    if (adminRoute && !response.payload.isAdmin) {\n                        props.history.push('/')\n                    }\n                    //Logged in Status, but Try to go into log in page \n                    else {\n                        if (option === false) {\n                            props.history.push('/')\n                        }\n                    }\n                }\n            })\n\n        }, [])\n\n        return (\n            <SpecificComponent {...props} user={user} />\n        )\n    }\n    return AuthenticationCheck\n}\n\n\n","const quizType = [\r\n    {\r\n        \"_id\":1,\r\n        \"name\":\"OX퀴즈\"\r\n    },\r\n    {\r\n        \"_id\":2,\r\n        \"name\":\"4지선다\"\r\n    },\r\n    {\r\n        \"_id\":3,\r\n        \"name\":\"5지선다\"\r\n    }\r\n]\r\n\r\nconst quizNumValue = [\r\n    {\r\n        \"_id\":0,\r\n        \"name\":\"모두\",\r\n        \"array\":[]\r\n    },\r\n    {\r\n        \"_id\":1,\r\n        \"name\":\"5문제\",\r\n        \"array\":[0, 5]\r\n    },\r\n    {\r\n        \"_id\":2,\r\n        \"name\":\"10문제\",\r\n        \"array\":[6,10]\r\n    },\r\n    {\r\n        \"_id\":3,\r\n        \"name\":\"20문제\",\r\n        \"array\":[11,20]\r\n    },\r\n    {\r\n        \"_id\":4,\r\n        \"name\":\"50문제\",\r\n        \"array\":[21,50]\r\n    }\r\n]\r\n\r\nexport {\r\n    quizType,\r\n    quizNumValue\r\n}","import React, { useState } from \"react\";\r\nimport { Collapse, Radio } from 'antd';\r\n\r\nconst { Panel } = Collapse\r\n\r\nfunction RadioBox(props) {\r\n    const [Value, setValue] =useState(0)\r\n    const RadioBoxRender = () => props.list && props.list.map((value)=>(\r\n        <Radio key={value._id} value={value._id}>\r\n            {value.name}\r\n        </Radio>\r\n    ))\r\n\r\n    const handleChange =(event)=>{\r\n        setValue(event.target.value)\r\n        props.handleFilter(event.target.value)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Collapse defaultActiveKey={['0']}>\r\n                <Panel header=\"문제 갯수 선택하기\" key=\"1\">\r\n                    <Radio.Group onChange={handleChange} value={Value}>\r\n                        {RadioBoxRender()}\r\n                    </Radio.Group>\r\n\r\n                </Panel>\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RadioBox","import React, { useState } from 'react'\r\nimport { Input } from 'antd';\r\n\r\nconst { Search } = Input;\r\n\r\n\r\nfunction SearchFeature(props) {\r\n\r\n    const [SearchTerm, setSearchTerm] = useState(\"\")\r\n\r\n    const searchHandler = (event)=>{\r\n        setSearchTerm(event.target.value)\r\n        props.refreshFunction(event.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n\r\n            <Search\r\n                placeholder=\"검색어를 입력하세요\" \r\n                allowClear \r\n                onChange={searchHandler} \r\n                style={{ width: 200 }}\r\n                value={SearchTerm}\r\n                />\r\n                \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchFeature\r\n","import React, { useEffect, useState, useCallback } from 'react'\r\nimport axios from \"axios\";\r\nimport { Col, Card, Row, Button } from 'antd';\r\nimport { quizNumValue } from './Sections/Datas';\r\nimport RadioBox from './Sections/RadioBox';\r\nimport SearchFeature from './Sections/SearchFeature';\r\n\r\n\r\n\r\nconst { Meta } = Card;\r\n\r\nfunction LandingPage() {\r\n\r\n    const [Quizs, setQuizs] = useState([])\r\n    const [Skip, setSkip] = useState(0)\r\n    const [Limit, ] = useState(8)\r\n    const [PostSize, setPostSize] = useState(8)\r\n    const [Filters, setFilters] = useState({\r\n        quizNumValue: []\r\n    })\r\n\r\n    const [, setSearchTerm] = useState(\"\")\r\n\r\n    const getQuiz = useCallback(async (body)=>{\r\n        await axios.post('/api/quiz/quizs', body)\r\n            .then(response=>{\r\n                if (response.data.success) {\r\n                    if(body.loadMore){\r\n                        setQuizs([...Quizs, ...response.data.quizinfo])\r\n                    } else {\r\n                        setQuizs(response.data.quizinfo)\r\n                    }\r\n                    setPostSize(response.data.postSize)\r\n                }else{\r\n                    alert('퀴즈를 가져오는데 실패하였습니다.')\r\n                }\r\n            })\r\n        },[Quizs]\r\n    )\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        let body = {\r\n            skip: Skip,\r\n            limit: Limit\r\n        }\r\n        \r\n        getQuiz(body)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [Skip, Limit ])\r\n\r\n    \r\n\r\n    const loadHandler = () => {\r\n\r\n        let skip = Skip + Limit\r\n\r\n        let body = {\r\n            skip: skip,\r\n            limit: Limit,\r\n            loadMore: true,\r\n            filters: Filters\r\n        }\r\n        getQuiz(body)\r\n        setSkip(skip)\r\n    }\r\n    \r\n\r\n    const renderCards = Quizs.map((quiz, index) => {\r\n        const handleImgError = (e)=>{\r\n            e.target.src = 'https://toonimagetest.s3.ap-northeast-2.amazonaws.com/raw/moduquiz.jpg';\r\n        }\r\n        return <Col lg={6} md={8} xs={24} key={index}>\r\n            <Card\r\n                hoverable\r\n                cover={<a href={`/quiz/${quiz._id}`}><img alt={quiz.images} style={{ width:'100%', maxHeight:'150px' }} src={quiz.images} onError={handleImgError}/></a>}\r\n            >\r\n                <Meta\r\n                    className=\"card-\"\r\n                    title={<a href={`/quiz/${quiz._id}`}>{quiz.quizTitleValue}</a>}\r\n                    description={<a href={`/quiz/${quiz._id}`}>{`${quiz.descriptionValue}   문제수: ${quiz.quizNumValue}`}</a>}\r\n                />\r\n            </Card>\r\n        </Col>\r\n    })\r\n\r\n    const updateSearchTerm = (newSearchTerm) => {\r\n        let body = {\r\n            skip: 0,\r\n            limit: Limit,\r\n            filters: Filters,\r\n            searchTerm: newSearchTerm\r\n        }\r\n\r\n        setSkip(0)\r\n        setSearchTerm(newSearchTerm)\r\n        getQuiz(body)\r\n\r\n    }\r\n    \r\n    const showFilterResults = (filters)=>{\r\n        let body = {\r\n            skip: 0,\r\n            limit: Limit,\r\n            filters: filters\r\n        }\r\n        getQuiz(body)\r\n        setSkip(0)\r\n    }\r\n\r\n    const handleNumChange = (value)=>{\r\n        const data = quizNumValue ;\r\n        let array = [];\r\n        for (let key in data){\r\n            if(data[key]._id === parseInt(value, 10)){\r\n                array = data[key].array;\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    const handleFilter = (filters, category) =>{\r\n        const newFilters = {...Filters}\r\n\r\n        newFilters[category] = filters\r\n\r\n        showFilterResults(newFilters)\r\n\r\n        if(category === \"quizNumValue\"){\r\n            let NumValues = handleNumChange(filters)\r\n            newFilters[category] =NumValues\r\n        }\r\n        setFilters(newFilters)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ width: '75%', margin: '3rem auto' }}>\r\n\r\n            <div style={{ textAlign: 'center' }}>\r\n                <h2> 아무거나 모의고사 </h2>\r\n            </div>\r\n            <br />\r\n            \r\n            {/* Filter */}\r\n            <Row gutter={[16, 16]} >\r\n                <Col lg={24} xs={24}>\r\n                    <RadioBox list={quizNumValue} handleFilter={filters => handleFilter(filters, 'quizNumValue')} />\r\n                </Col>\r\n            </Row>\r\n\r\n            {/* Search */}\r\n            <div style={{ display:'flex', justifyContent:'flex-end', margin:'1rem auto' }}>\r\n                <SearchFeature \r\n                    refreshFunction={updateSearchTerm}\r\n                />\r\n            </div>\r\n\r\n\r\n\r\n            {/* Cards */}\r\n\r\n\r\n            <Row gutter={[16, 16]} >\r\n                {renderCards}\r\n            </Row>\r\n\r\n            <br />\r\n            {PostSize >= Limit &&\r\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                    <Button onClick={loadHandler}>더보기</Button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default LandingPage","import React, { useState } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { loginUser } from \"../../../_actions/user_actions\";\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Form, Input, Button, Checkbox, Typography } from 'antd';\r\nimport { useDispatch } from \"react-redux\";\r\nimport { UserOutlined, LockOutlined } from '@ant-design/icons';\r\n\r\n\r\nconst { Title } = Typography;\r\n\r\nfunction LoginPage(props) {\r\n  const dispatch = useDispatch();\r\n  const rememberMeChecked = localStorage.getItem(\"rememberMe\") ? true : false;\r\n\r\n  const [formErrorMessage, setFormErrorMessage] = useState('')\r\n  const [rememberMe, setRememberMe] = useState(rememberMeChecked)\r\n\r\n  const handleRememberMe = () => {\r\n    setRememberMe(!rememberMe)\r\n  };\r\n\r\n  const initialEmail = localStorage.getItem(\"rememberMe\") ? localStorage.getItem(\"rememberMe\") : '';\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        email: initialEmail,\r\n        password: '',\r\n      }}\r\n      validationSchema={Yup.object().shape({\r\n        email: Yup.string()\r\n          .email('Email is invalid')\r\n          .required('Email is required'),\r\n        password: Yup.string()\r\n          .min(6, 'Password must be at least 6 characters')\r\n          .required('Password is required'),\r\n      })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          let dataToSubmit = {\r\n            email: values.email,\r\n            password: values.password\r\n          };\r\n\r\n          dispatch(loginUser(dataToSubmit))\r\n            .then(response => {\r\n              if (response.payload.loginSuccess) {\r\n                window.localStorage.setItem('userId', response.payload.userId);\r\n                if (rememberMe === true) {\r\n                  window.localStorage.setItem('rememberMe', values.id);\r\n                } else {\r\n                  localStorage.removeItem('rememberMe');\r\n                }\r\n                props.history.push(\"/\");\r\n              } else {\r\n                setFormErrorMessage('Check out your Account or Password again')\r\n              }\r\n            })\r\n            .catch(err => {\r\n              setFormErrorMessage('Check out your Account or Password again')\r\n              setTimeout(() => {\r\n                setFormErrorMessage(\"\")\r\n              }, 3000);\r\n            });\r\n          setSubmitting(false);\r\n        }, 500);\r\n      }}\r\n    >\r\n      {props => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n        } = props;\r\n        return (\r\n          <div className=\"app\">\r\n\r\n            <Title level={2}>Log In</Title>\r\n            <form onSubmit={handleSubmit} style={{ width: '350px' }}>\r\n\r\n              <Form.Item required>\r\n                <Input\r\n                  id=\"email\"\r\n                  prefix={<UserOutlined type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Enter your email\"\r\n                  type=\"email\"\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\r\n                  }\r\n                />\r\n                {errors.email && touched.email && (\r\n                  <div className=\"input-feedback\">{errors.email}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              <Form.Item required>\r\n                <Input\r\n                  id=\"password\"\r\n                  prefix={<LockOutlined type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                  placeholder=\"Enter your password\"\r\n                  type=\"password\"\r\n                  value={values.password}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={\r\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\r\n                  }\r\n                />\r\n                {errors.password && touched.password && (\r\n                  <div className=\"input-feedback\">{errors.password}</div>\r\n                )}\r\n              </Form.Item>\r\n\r\n              {formErrorMessage && (\r\n                <label ><p style={{ color: '#ff0000bf', fontSize: '0.7rem', border: '1px solid', padding: '1rem', borderRadius: '10px' }}>{formErrorMessage}</p></label>\r\n              )}\r\n\r\n              <Form.Item>\r\n                <Checkbox id=\"rememberMe\" onChange={handleRememberMe} checked={rememberMe} >Remember me</Checkbox>\r\n                <a className=\"login-form-forgot\" href=\"/reset_user\" style={{ float: 'right' }}>\r\n                  forgot password\r\n                  </a>\r\n                <div>\r\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{ minWidth: '100%' }} disabled={isSubmitting} onSubmit={handleSubmit}>\r\n                    Log in\r\n                </Button>\r\n                </div>\r\n                Or <a href=\"/register\">register now!</a>\r\n              </Form.Item>\r\n            </form>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default withRouter(LoginPage);\r\n\r\n\r\n","import React from \"react\";\nimport moment from \"moment\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { registerUser } from \"../../../_actions/user_actions\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n  Form,\n  Input,\n  Button,\n} from 'antd';\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\nconst tailFormItemLayout = {\n  wrapperCol: {\n    xs: {\n      span: 24,\n      offset: 0,\n    },\n    sm: {\n      span: 16,\n      offset: 8,\n    },\n  },\n};\n\nfunction RegisterPage(props) {\n  const dispatch = useDispatch();\n  return (\n\n    <Formik\n      initialValues={{\n        email: '',\n        lastName: '',\n        name: '',\n        password: '',\n        confirmPassword: ''\n      }}\n      validationSchema={Yup.object().shape({\n        name: Yup.string()\n          .required('Name is required'),\n        lastName: Yup.string()\n          .required('Last Name is required'),\n        email: Yup.string()\n          .email('Email is invalid')\n          .required('Email is required'),\n        password: Yup.string()\n          .min(6, 'Password must be at least 6 characters')\n          .required('Password is required'),\n        confirmPassword: Yup.string()\n          .oneOf([Yup.ref('password'), null], 'Passwords must match')\n          .required('Confirm Password is required')\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n\n          let dataToSubmit = {\n            email: values.email,\n            password: values.password,\n            name: values.name,\n            lastname: values.lastname,\n            image: `http://gravatar.com/avatar/${moment().unix()}?d=identicon`\n          };\n\n          dispatch(registerUser(dataToSubmit)).then(response => {\n            if (response.payload.success) {\n              props.history.push(\"/login\");\n            } else {\n              alert(response.payload.err.errmsg)\n            }\n          })\n\n          setSubmitting(false);\n        }, 500);\n      }}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n        } = props;\n        return (\n          <div className=\"app\">\n            <h2>Sign up</h2>\n            <Form style={{ minWidth: '375px' }} {...formItemLayout} onSubmit={handleSubmit} >\n\n              <Form.Item required label=\"Name\">\n                <Input\n                  id=\"name\"\n                  placeholder=\"Enter your name\"\n                  type=\"text\"\n                  value={values.name}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.name && touched.name ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.name && touched.name && (\n                  <div className=\"input-feedback\">{errors.name}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Last Name\">\n                <Input\n                  id=\"lastName\"\n                  placeholder=\"Enter your Last Name\"\n                  type=\"text\"\n                  value={values.lastName}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.lastName && touched.lastName ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.lastName && touched.lastName && (\n                  <div className=\"input-feedback\">{errors.lastName}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Email\" hasFeedback validateStatus={errors.email && touched.email ? \"error\" : 'success'}>\n                <Input\n                  id=\"email\"\n                  placeholder=\"Enter your Email\"\n                  type=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.email && touched.email && (\n                  <div className=\"input-feedback\">{errors.email}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Password\" hasFeedback validateStatus={errors.password && touched.password ? \"error\" : 'success'}>\n                <Input\n                  id=\"password\"\n                  placeholder=\"Enter your password\"\n                  type=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-feedback\">{errors.password}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required label=\"Confirm\" hasFeedback>\n                <Input\n                  id=\"confirmPassword\"\n                  placeholder=\"Enter your confirmPassword\"\n                  type=\"password\"\n                  value={values.confirmPassword}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.confirmPassword && touched.confirmPassword ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.confirmPassword && touched.confirmPassword && (\n                  <div className=\"input-feedback\">{errors.confirmPassword}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item {...tailFormItemLayout}>\n                <Button onClick={handleSubmit} type=\"primary\" disabled={isSubmitting}>\n                  Submit\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\n\nexport default RegisterPage\n","import React from 'react';\nimport { Menu } from 'antd';\n// const SubMenu = Menu.SubMenu;\n// const MenuItemGroup = Menu.ItemGroup;\n\nfunction LeftMenu(props) {\n  return (\n    <Menu mode={props.mode}>\n    <Menu.Item key=\"mail\">\n      <a href=\"/\">Home</a>\n    </Menu.Item>\n    {/* <SubMenu title={<span>Blogs</span>}>\n      <MenuItemGroup title=\"Item 1\">\n        <Menu.Item key=\"setting:1\">Option 1</Menu.Item>\n        <Menu.Item key=\"setting:2\">Option 2</Menu.Item>\n      </MenuItemGroup>\n      <MenuItemGroup title=\"Item 2\">\n        <Menu.Item key=\"setting:3\">Option 3</Menu.Item>\n        <Menu.Item key=\"setting:4\">Option 4</Menu.Item>\n      </MenuItemGroup>\n    </SubMenu> */}\n  </Menu>\n  )\n}\n\nexport default LeftMenu","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react';\r\nimport { Menu } from 'antd';\r\nimport axios from 'axios';\r\nimport { USER_SERVER } from '../../../Config';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { useSelector } from \"react-redux\";\r\n\r\nfunction RightMenu(props) {\r\n  const user = useSelector(state => state.user)\r\n\r\n  const logoutHandler = async () => {\r\n    await axios.get(`${USER_SERVER}/logout`).then(response => {\r\n      if (response.status === 200) {\r\n        props.history.push(\"/\");\r\n      } else {\r\n        alert('Log Out Failed')\r\n      }\r\n    });\r\n  };\r\n\r\n  if (user.userData && !user.userData.isAuth) {\r\n    return (\r\n      <Menu mode={props.mode}>\r\n        {/* <Menu.Item key=\"mail\">\r\n          <a href=\"/loginme\">Signin</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"app\">\r\n          <a href=\"/registerme\">Signup</a>\r\n        </Menu.Item> */}\r\n      </Menu>\r\n    )\r\n  } else {\r\n    return (\r\n      <Menu mode={props.mode}>\r\n        <Menu.Item key=\"upload\">\r\n          <a href=\"/quiz/upload\">퀴즈만들기</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"quizcart\">\r\n          <a href=\"/user/quizcart\">저장한 퀴즈들</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"madequizs\">\r\n          <a href=\"/madequizs\">내가 제작한 퀴즈들</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"logout\">\r\n          <a onClick={logoutHandler} href='/'>Logout</a>\r\n        </Menu.Item>\r\n      </Menu>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(RightMenu);\r\n\r\n","import React, { useState } from 'react';\r\nimport LeftMenu from './Sections/LeftMenu';\r\nimport RightMenu from './Sections/RightMenu';\r\nimport { Drawer, Button } from 'antd';\r\nimport './Sections/Navbar.css';\r\nimport { AlignRightOutlined } from '@ant-design/icons';\r\n\r\nfunction NavBar() {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const showDrawer = () => {\r\n    setVisible(true)\r\n  };\r\n\r\n  const onClose = () => {\r\n    setVisible(false)\r\n  };\r\n\r\n  return (\r\n    <nav className=\"menu\" style={{ position: 'fixed', zIndex: 5, width: '100%' }}>\r\n      <div className=\"menu__logo\">\r\n        <a href=\"/\">모두 퀴즈</a>\r\n      </div>\r\n      <div className=\"menu__container\">\r\n        <div className=\"menu_left\">\r\n          <LeftMenu mode=\"horizontal\" />\r\n        </div>\r\n        <div className=\"menu_rigth\">\r\n          <RightMenu mode=\"horizontal\" />\r\n        </div>\r\n        <Button\r\n          className=\"menu__mobile-button\"\r\n          type=\"primary\"\r\n          onClick={showDrawer}\r\n        >\r\n          <AlignRightOutlined />\r\n        </Button>\r\n        <Drawer\r\n          title=\"Basic Drawer\"\r\n          placement=\"right\"\r\n          className=\"menu_drawer\"\r\n          closable={false}\r\n          onClose={onClose}\r\n          visible={visible}\r\n        >\r\n          <LeftMenu mode=\"inline\" />\r\n          <RightMenu mode=\"inline\" />\r\n        </Drawer>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default NavBar","import React from 'react'\n\nfunction Footer() {\n    return (\n        <div style={{\n            height: '80px', display: 'flex',\n            flexDirection: 'column', alignItems: 'center',\n            justifyContent: 'center', fontSize:'1rem'\n        }}>\n           <p>contact info: wlsxo1651@gmail.com</p>\n        </div>\n    )\n}\n\nexport default Footer\n","const Questions = \r\n[\r\n    {\r\n        questionText : \"우리나라\",\r\n        image : \"http://placeimg.com/360/200/nature\",\r\n        answerOption : ['서울', '대구', '대전', '부산'],\r\n        rightAnswer : '서울'\r\n    },\r\n    {\r\n        questionText : \"일본\",\r\n        image : \"http://placeimg.com/360/200/any\",\r\n        answerOption : ['교토', '오사카', '도쿄', '나가사'],\r\n        rightAnswer : '도쿄'\r\n    },\r\n    {\r\n        questionText : \"네덜란드\",\r\n        image : \"http://placeimg.com/360/200/people\",\r\n        answerOption : ['룩셈브루크', '런던', '파리', '암스테르담'],\r\n        rightAnswer : '암스테르담'\r\n    },\r\n    {\r\n        questionText : \"일본\",\r\n        image : \"http://placeimg.com/360/200/tech\",\r\n        answerOption : ['교토', '오사카', '도쿄', '나가사'],\r\n        rightAnswer : '도쿄'\r\n    },\r\n    {\r\n        questionText : \"우리나라\",\r\n        image : \"http://placeimg.com/360/200/grayscale\",\r\n        answerOption : ['서울', '대구', '대전', '부산'],\r\n        rightAnswer : '서울'\r\n    },\r\n    {\r\n        questionText : \"네덜란드\",\r\n        image: \"http://placeimg.com/640/480/arch\",\r\n        answerOption : ['룩셈브루크', '런던', '파리', '암스테르담'],\r\n        rightAnswer : '암스테르담'\r\n    }\r\n];\r\n\r\nexport default Questions;","import React, { useState } from \"react\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Button, Container, ProgressBar, Row, Col } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Questions from './Questions';\r\n\r\n\r\n\r\nfunction QuestionTest() {\r\n    const history = useHistory();\r\n    const [questions, ] = useState(Questions)\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n    const [showScore, setShowScore] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const progressBar =(currentQuestion)/(questions.city.length)*100\r\n    const result = Math.ceil(score / questions.city.length * 100)\r\n\r\n    const handleAnswerButtonClick = (e)=>{\r\n        const nextQuestion = currentQuestion + 1;\r\n        setCurrentQuestion(nextQuestion);\r\n        if (nextQuestion < questions.city.length) {\r\n            setCurrentQuestion(nextQuestion);\r\n        } else {\r\n            setShowScore(true);\r\n        };\r\n        if (e.target.value === questions.city[currentQuestion].rightAnswer){\r\n            setScore(score+1)\r\n        }\r\n    };\r\n\r\n    return(\r\n        <Container>\r\n            <Row>\r\n            <Col sm={12}>\r\n            <div>\r\n                {showScore ? (\r\n                    <div>\r\n                    <h1 className=\"result-text mt-5\">퀴즈가 끝났습니다.</h1>\r\n                    <div className='score-section'>\r\n                        <h1 className=\"result-score\">{result} 점</h1>\r\n                    </div>\r\n                    </div>\r\n                ) : (\r\n                <div>\r\n                    <Button onClick={()=>{ history.goBack() }} variant=\"primary\" size=\"lg\">\r\n                        뒤로가기\r\n                    </Button>\r\n                    <div className='question-count mt-4'>\r\n                        <ProgressBar animated now={progressBar} />\r\n                    </div>\r\n                    <div className='question-text text-center mt-5'>{questions.city[currentQuestion].questionText}</div>\r\n                    <div className='container'>\r\n                        <div className='row'>\r\n                        <div className=\"img mt-3 text-center\"><img alt=\"\" src={questions.city[currentQuestion].image}></img></div>\r\n                        {questions.city[currentQuestion].answerOption.map((answerOption,i)=>{\r\n                            return (\r\n                            <Button onClick={handleAnswerButtonClick} className='answer mt-4' value={questions.city[currentQuestion].answerOption[i]}>\r\n                                {questions.city[currentQuestion].answerOption[i]}\r\n                                </Button>)\r\n                        })}\r\n                        </div>\r\n                    </div>\r\n                    <input type=\"hidden\" id=\"score\" value={score} />\r\n                </div>)\r\n                }\r\n            </div>\r\n            </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default QuestionTest;","import React, { useState } from 'react'\r\nimport Dropzone from 'react-dropzone';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\n\r\nfunction FileUpload(props) {\r\n\r\n    const [Image, setImage] = useState([])\r\n\r\n\r\n    const dropHandler = (files) => {\r\n\r\n        let formData = new FormData();\r\n        const config = {\r\n            // 어떤 파일의 타입을 올리는지 정의 해줘서 backend에서 에러없이 받을 수 있도록 해줌\r\n            header: { 'content-type': 'multipart/form-data' }\r\n        }\r\n        // 파일을 formData에 추가해주기\r\n        formData.append(\"file\", files[0])\r\n        axios.post('/api/quiz/image', formData, config)\r\n            // response 안에 정보가 들어가 있는 상태\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    setImage([...Image, response.data.filePath])\r\n                    props.refreshFunction([...Image, response.data.filePath])\r\n                } else {\r\n                    alert('파일을 저장하는데 실패하였습니다.')\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <Dropzone onDrop={dropHandler}>\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div style={{\r\n                        width: '400px', height: '400px', border: '1px solid lightgray',\r\n                        display: 'flex', alignItems: 'center', justifyContent: 'center'\r\n                    }}\r\n                        {...getRootProps()}\r\n                    >\r\n                        <input {...getInputProps()} />\r\n                        <PlusOutlined type=\"plus\" style={{ fontSize: '3rem' }} />\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n\r\n            <div style={{ display: 'flex', width: '400px', height: '400px', overflowX: 'scroll' }}>\r\n                {Image.map((image, index) => (\r\n                    <img alt='' key={`${image.key}`} style={{ minWidth: '400px', width: '400px', height: '400px' }}\r\n                        src={`${image}`}\r\n                    />\r\n                ))}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FileUpload;","import React, { useState, useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport axios from 'axios';\r\n\r\nfunction AnswerFileUpload(props) {\r\n\r\n    const [answerImage, setanswerImage] = useState(\"\")\r\n\r\n\r\n    const onDrop = useCallback(files => {\r\n\r\n        let answerformData = new FormData();\r\n        const config = {\r\n            // 어떤 파일의 타입을 올리는지 정의 해줘서 backend에서 에러없이 받을 수 있도록 해줌\r\n            header: { 'content-type': 'multipart/form-data' }\r\n        }\r\n        // 파일을 formData에 추가해주기\r\n        answerformData.append(\"file\", files[0])\r\n        axios.post('/api/quiz/answer/image', answerformData, config)\r\n            // response 안에 정보가 들어가 있는 상태\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    setanswerImage([...answerImage, response.data.filePath])\r\n                    props.refreshFunction([...answerImage, response.data.filePath])\r\n                } else {\r\n                    alert('파일을 저장하는데 실패하였습니다.')\r\n                }\r\n            })\r\n    }, [answerImage, props])\r\n\r\n    const answerImageDeleteHandler = () => {\r\n\r\n        setanswerImage(\"\")\r\n        props.refreshFunction()\r\n    }\r\n\r\n    const {\r\n        getRootProps,\r\n        getInputProps\r\n    } = useDropzone({\r\n        maxFiles: 1,\r\n        accept: 'image/*',\r\n        onDrop\r\n    })\r\n\r\n\r\n    return (\r\n        <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n            <section className=\"container\">\r\n                <div {...getRootProps({ className: 'dropzone' })} style={{\r\n                    width: '300px', height: '300px', border: '1px solid lightgray',\r\n                    display: 'flex', alignItems: 'center', justifyContent: 'center'\r\n                }}>\r\n                    <input {...getInputProps()} />\r\n                    <PlusOutlined type=\"plus\" style={{ fontSize: '3rem', justifyContent: 'center' }} />\r\n                </div>\r\n\r\n            </section>\r\n\r\n            <div style={{ display: 'flex', width: '300px', height: '300px', border: '1px solid lightgray' }}>\r\n                <div>{}</div>\r\n\r\n                <div >\r\n                    <img\r\n                        alt=''\r\n                        style={{ minWidth: '300px', width: '300px', height: '300px' }}\r\n                        src={`${answerImage}`}\r\n                        onClick={answerImageDeleteHandler}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AnswerFileUpload;","import React, { useState, useRef } from 'react'\r\nimport { Button, Input, Row, Col } from 'antd';\r\nimport uuid from \"react-uuid\"\r\nimport AnswerFileUpload from '../../Utils/AnswerFileUpload';\r\nimport PropTypes from 'prop-types';\r\nimport { useTheme } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableFooter from '@mui/material/TableFooter';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport FirstPageIcon from '@mui/icons-material/FirstPage';\r\nimport KeyboardArrowLeft from '@mui/icons-material/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@mui/icons-material/KeyboardArrowRight';\r\nimport LastPageIcon from '@mui/icons-material/LastPage';\r\nimport { TableHead } from '@mui/material';\r\n\r\n\r\nfunction TablePaginationActions(props) {\r\n    const theme = useTheme();\r\n    const { count, page, rowsPerPage, onPageChange } = props;\r\n\r\n    const handleFirstPageButtonClick = (event) => {\r\n        onPageChange(event, 0);\r\n    };\r\n\r\n    const handleBackButtonClick = (event) => {\r\n        onPageChange(event, page - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = (event) => {\r\n        onPageChange(event, page + 1);\r\n    };\r\n\r\n    const handleLastPageButtonClick = (event) => {\r\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n    };\r\n\r\n    return (\r\n        <Box sx={{ flexShrink: 0, ml: 2.5 }}>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleBackButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"previous page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n            </IconButton>\r\n        </Box>\r\n    );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n    count: PropTypes.number.isRequired,\r\n    onPageChange: PropTypes.func.isRequired,\r\n    page: PropTypes.number.isRequired,\r\n    rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\n\r\n\r\nfunction UploadAnswer(props) {\r\n    const [rightanswer, setRightAnswer] = useState(\"\")\r\n    const [AnswerTable, setAnswerTable] = useState([]);\r\n    const [quizimage, setQuizimage] = useState([])\r\n    const [Quizquestion, setQuizquestion] = useState(\"\")\r\n    const [first, setFirst] = useState(\"\")\r\n    const [second, setSecond] = useState(\"\")\r\n    const [third, setThird] = useState(\"\")\r\n    const [fourth, setFourth] = useState(\"\")\r\n\r\n    const onQuizquestionChange = (event) => {\r\n        setQuizquestion(event.currentTarget.value)\r\n    }\r\n    const onFirstChange = (event) => {\r\n        setFirst(event.currentTarget.value)\r\n    }\r\n    const onSecondChange = (event) => {\r\n        setSecond(event.currentTarget.value)\r\n    }\r\n    const onThirdChange = (event) => {\r\n        setThird(event.currentTarget.value)\r\n    }\r\n    const onFourthChange = (event) => {\r\n        setFourth(event.currentTarget.value)\r\n    }\r\n\r\n    const updateAnswerImages = (newImages) => {\r\n        setQuizimage(newImages)\r\n    }\r\n\r\n    const nextKey = useRef(0)\r\n\r\n    const onAdd = () => {\r\n        const QuestionList = {\r\n            key: nextKey.current,\r\n            quizquestion: Quizquestion,\r\n            first: first,\r\n            second: second,\r\n            third: third,\r\n            fourth: fourth,\r\n            quizimage: quizimage,\r\n            rightanswer: rightanswer\r\n        }\r\n        if (!Quizquestion || !first || !second || !rightanswer) {\r\n            return alert(\"정답이나 퀴즈 선택지 중 빠진 내용이 있어요.\")\r\n        } else {\r\n            setAnswerTable([...AnswerTable, QuestionList])\r\n            props.refreshFunction([...AnswerTable, QuestionList])\r\n\r\n            setQuizquestion(\"\");\r\n            setFirst(\"\");\r\n            setSecond(\"\");\r\n            setThird(\"\");\r\n            setFourth(\"\");\r\n            setRightAnswer(\"\");\r\n            setQuizimage(\"\");\r\n\r\n            nextKey.current += 1\r\n        }\r\n    }\r\n\r\n    const onAnswerTypeChange = (event) => {\r\n        setRightAnswer(event.currentTarget.value)\r\n    }\r\n\r\n\r\n\r\n\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(5);\r\n\r\n    // Avoid a layout jump when reaching the last page with empty rows.\r\n    const emptyRows =\r\n        page > 0 ? Math.max(0, (1 + page) * rowsPerPage - AnswerTable.length) : 0;\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n\r\n    const deleteHandler = (row) => {\r\n        const currentIndex = AnswerTable.indexOf(row)\r\n\r\n        let newAnswerTable = [...AnswerTable]\r\n        newAnswerTable.splice(currentIndex, 1)\r\n\r\n        setAnswerTable(newAnswerTable)\r\n        props.refreshFunction(newAnswerTable)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <label style={{ fontSize: '1.5rem' }}> 각 퀴즈 질문 만들기 </label>\r\n            <Input.Group size=\"large\">\r\n                <div>\r\n                    <Input value={Quizquestion} onChange={onQuizquestionChange} allowClear placeholder=\"퀴즈를 넣어주세요\" />\r\n                    <br />\r\n                </div>\r\n                <br />\r\n                <br />\r\n                <AnswerFileUpload refreshFunction={updateAnswerImages} />\r\n                <div>\r\n                    <br />\r\n                    <br />\r\n                    <Row gutter={16}>\r\n                        <Col lg={6} md={8} xs={24}>\r\n                            <Input value={first} onChange={onFirstChange} allowClear placeholder=\"1번 퀴즈선택지를 입력해주세요\" />\r\n                        </Col>\r\n                        <Col lg={6} md={8} xs={24}>\r\n                            <Input value={second} onChange={onSecondChange} allowClear placeholder=\"2번 퀴즈선택지를 입력해주세요\" />\r\n                        </Col>\r\n                        <Col lg={6} md={8} xs={24}>\r\n                            <Input value={third} onChange={onThirdChange} allowClear placeholder=\"3번 퀴즈선택지를 입력해주세요\" />\r\n                        </Col>\r\n                        <Col lg={6} md={8} xs={24}>\r\n                            <Input value={fourth} onChange={onFourthChange} allowClear placeholder=\"4번 퀴즈선택지를 입력해주세요\" />\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n                <br />\r\n                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                    <div>\r\n                        <label>정답을 선택해주세요.</label>\r\n                        <br />\r\n                        <select key={uuid()} value={rightanswer} onChange={onAnswerTypeChange} >\r\n                            <option key={uuid()} value={rightanswer}>==정답선택==</option>\r\n                            <option value={first}>1번 선택지</option>\r\n                            <option value={second}>2번 선택지</option>\r\n                            <option value={third}>3번 선택지</option>\r\n                            <option value={fourth}>4번 선택지</option>\r\n                        </select>\r\n                    </div>\r\n                    <p>정답 선택지 : {rightanswer}</p>\r\n                    <Button type=\"submit\" onClick={onAdd}>\r\n                        질문 추가하기\r\n                    </Button>\r\n                </div>\r\n            </Input.Group>\r\n            <br />\r\n            <br />\r\n            <label style={{ fontSize: '1.5rem' }}>현재 만들어진 퀴즈 질문들</label>\r\n            <TableContainer component={Paper}>\r\n                <Table sx={{ minWidth: 500 }} aria-label=\"custom pagination table\">\r\n                    <TableHead>\r\n                        <tr>\r\n                            <TableCell align=\"center\">이미지</TableCell>\r\n                            <TableCell align=\"center\">퀴즈질문</TableCell>\r\n                            <TableCell align=\"center\">선택지1</TableCell>\r\n                            <TableCell align=\"center\">선택지2</TableCell>\r\n                            <TableCell align=\"center\">선택지3</TableCell>\r\n                            <TableCell align=\"center\">선택지4</TableCell>\r\n                            <TableCell align=\"center\">정답</TableCell>\r\n                            <TableCell align=\"center\">삭제</TableCell>\r\n                        </tr>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {(rowsPerPage > 0\r\n                            ? AnswerTable.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                            : AnswerTable\r\n                        ).map((row) => (\r\n                            <TableRow hover key={row.key}>\r\n                                <TableCell style={{ width: 160 }} align=\"center\">\r\n                                    <img alt='' src={row.quizimage} style={{ maxWidth: \"200px\", textAlign: 'center' }} />\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"center\">\r\n                                    {row.quizquestion}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"center\">\r\n                                    {row.first}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"center\">\r\n                                    {row.second}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"center\">\r\n                                    {row.third}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"center\">\r\n                                    {row.fourth}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"center\">\r\n                                    {row.rightanswer}\r\n                                </TableCell>\r\n                                <TableCell style={{ width: 160 }} align=\"center\">\r\n                                    <Button onClick={()=>{deleteHandler(row)}} key={row}>삭제</Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n\r\n                        {emptyRows > 0 && (\r\n                            <TableRow style={{ height: 53 * emptyRows }}>\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                    <TableFooter>\r\n                        <TableRow align=\"right\">\r\n                            <TablePagination\r\n                                rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                                colSpan={9}\r\n                                count={AnswerTable.length}\r\n                                rowsPerPage={rowsPerPage}\r\n                                page={page}\r\n                                SelectProps={{\r\n                                    inputProps: {\r\n                                        'aria-label': 'rows per page',\r\n                                    },\r\n                                    native: true,\r\n                                }}\r\n                                onPageChange={handleChangePage}\r\n                                onRowsPerPageChange={handleChangeRowsPerPage}\r\n                                ActionsComponent={TablePaginationActions}\r\n                            />\r\n                        </TableRow>\r\n                    </TableFooter>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default UploadAnswer\r\n","import React, { useState } from \"react\";\r\nimport { Typography, Button, Form, Input, Tabs } from 'antd';\r\nimport FileUpload from \"../../Utils/FileUpload\";\r\nimport Axios from \"axios\";\r\nimport UploadAnswer from './UploadAnswer';\r\n\r\nconst { Title } = Typography;\r\nconst { TextArea } = Input;\r\nconst { TabPane } = Tabs;\r\n\r\nfunction callback(key) {\r\n}\r\n\r\nfunction UploadQuiz(props) {\r\n\r\n    const [QuizTitleValue, setQuizTitleValue] = useState(\"\");\r\n    const [DescriptionValue, setDescriptionValue] = useState(\"\");\r\n    const [QuizNumValue, setQuizNumValue] = useState(0);\r\n    const [Images, setImages] = useState([]);\r\n    const [ResultImage, setResultImage] = useState([]);\r\n    const [ResultMessage100, setResultMessage100] = useState(\"\");\r\n    const [ResultMessage80, setResultMessage80] = useState(\"\");\r\n    const [ResultMessage60, setResultMessage60] = useState(\"\");\r\n    const [ResultMessage40, setResultMessage40] = useState(\"\");\r\n    const [ResultMessage0, setResultMessage0] = useState(\"\");\r\n\r\n    const [AnswerTable, setAnswerTable] = useState([]);\r\n\r\n    const QuestionListNumber = parseInt(AnswerTable.length)\r\n\r\n    const ontitleChange = (event) => {\r\n        setQuizTitleValue(event.currentTarget.value)\r\n    }\r\n\r\n    const onDescriptionChange = (event) => {\r\n        setDescriptionValue(event.currentTarget.value)\r\n    }\r\n\r\n    const onQuizNumChange = (event) => {\r\n        setQuizNumValue(event.currentTarget.value)\r\n    }\r\n\r\n    const updateImages = (newImages) => {\r\n        setImages(newImages)\r\n    }\r\n    const updateResultImages = (event) => {\r\n        setResultImage(event)\r\n    }\r\n    const updateResult100 = (event) => {\r\n        setResultMessage100(event.currentTarget.value)\r\n    }\r\n    const updateResult80 = (event) => {\r\n        setResultMessage80(event.currentTarget.value)\r\n    }\r\n    const updateResult60 = (event) => {\r\n        setResultMessage60(event.currentTarget.value)\r\n    }\r\n    const updateResult40 = (event) => {\r\n        setResultMessage40(event.currentTarget.value)\r\n    }\r\n    const updateResult0 = (event) => {\r\n        setResultMessage0(event.currentTarget.value)\r\n    }\r\n\r\n    const updateAnswer = (newAnswerTable) => {\r\n        setAnswerTable(newAnswerTable)\r\n    }\r\n\r\n    const onSubmitChange = (event) => {\r\n        if (!QuizTitleValue || !DescriptionValue || !QuizNumValue) {\r\n            return alert(\"빠진 내용이 있어요.\")\r\n        }\r\n\r\n        if (QuizNumValue > QuestionListNumber) {\r\n            return alert(\"만들어진 퀴즈 질문 갯수는 이용자가 풀 문제의 수보다 커야합니다.\")\r\n        }\r\n\r\n        // 서버에 채운 값들을 보내준다.\r\n\r\n        const body = {\r\n            // 로그인한 사람의 id\r\n            writer: props.user.userData._id,\r\n            quizTitleValue: QuizTitleValue,\r\n            descriptionValue: DescriptionValue,\r\n            quizNumValue: QuizNumValue,\r\n            images: Images,\r\n            answer: AnswerTable,\r\n            resultImage: ResultImage,\r\n            resultMessage100: ResultMessage100,\r\n            resultMessage80: ResultMessage80,\r\n            resultMessage60: ResultMessage60,\r\n            resultMessage40: ResultMessage40,\r\n            resultMessage0: ResultMessage0,\r\n        }\r\n        Axios.post('/api/quiz', body)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    alert('퀴즈 제작에 성공했습니다.')\r\n                    props.history.push('/')\r\n                } else {\r\n                    alert('퀴즈 제작에 실패했습니다.')\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ maxWidth: \"1000px\", margin: \"2rem auto\", width: \"90%\" }}>\r\n            <Tabs defaultActiveKey=\"1\" onChange={callback}>\r\n                <TabPane tab=\"퀴즈 제목\" key=\"1\">\r\n                    <div style={{ textAlign: 'center', marginBottom: '2rem' }}>\r\n                        <Title level={2}> 나만의 퀴즈 만들기 </Title>\r\n                    </div>\r\n                    <Form>\r\n                        <FileUpload refreshFunction={updateImages} />\r\n                        <br />\r\n                        <br />\r\n                        <label>퀴즈명</label>\r\n                        <Input onChange={ontitleChange} value={QuizTitleValue} />\r\n                        <br />\r\n                        <br />\r\n                        <label>설명</label>\r\n                        <TextArea onChange={onDescriptionChange} value={DescriptionValue} />\r\n                        <br />\r\n                        <br />\r\n                        <label>이용자가 풀 문제의 수</label>\r\n                        <Input type=\"number\" onChange={onQuizNumChange} value={QuizNumValue} />\r\n                        <br />\r\n                    </Form>\r\n                </TabPane>\r\n                <TabPane tab=\"문제 만들기\" key=\"2\">\r\n                    <Form>\r\n                        <br />\r\n                        <Title level={3}> 퀴즈 선택지는 순서대로 최소 2개 이상 입력하세요 </Title>\r\n                        <Title level={3}> (OX퀴즈, 3지선다형, 4지선다형 등) </Title>\r\n                        <br />\r\n                        <UploadAnswer refreshFunction={updateAnswer} />\r\n                        <br />\r\n                    </Form>\r\n                </TabPane>\r\n                <TabPane tab=\"결과 만들기\" key=\"3\">\r\n                    \r\n                        <Title level={3}> 결과 문구와 결말 이미지를 선택해주세요. </Title>\r\n                        <br />\r\n                        <Form>\r\n                        <FileUpload refreshFunction={updateResultImages} />\r\n                        <br />\r\n                        <br />\r\n                        <label>100점 결과 문구</label>\r\n                        <Input onChange={updateResult100} value={ResultMessage100} />\r\n                        <br />\r\n                        <br />\r\n                        <label>100점 미만 80점 이상 결과 문구</label>\r\n                        <Input onChange={updateResult80} value={ResultMessage80} />\r\n                        <br />\r\n                        <br />\r\n                        <label>80점 미만 60점 이상 결과 문구</label>\r\n                        <Input onChange={updateResult60} value={ResultMessage60} />\r\n                        <br />\r\n                        <br />\r\n                        <label>60점 미만 40점 이상 결과 문구</label>\r\n                        <Input onChange={updateResult40} value={ResultMessage40} />\r\n                        <br />\r\n                        <br />\r\n                        <label>40점 미만 0점 이상 결과 문구</label>\r\n                        <Input onChange={updateResult0} value={ResultMessage0} />\r\n                        <br />\r\n                        <br />\r\n                        <Button type=\"submit\" onClick={onSubmitChange}>\r\n                            확인\r\n                        </Button>\r\n                        <br />\r\n                        <br />\r\n                    </Form>\r\n                </TabPane>\r\n            </Tabs>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UploadQuiz;","import React, { useEffect, useState } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Row, Col } from 'antd';\r\nimport { Button, ProgressBar } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Axios from 'axios';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addToCart } from '../../../_actions/user_actions'\r\nimport './DetailQuiz.css';\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\nfunction DetailQuiz(props) {\r\n\r\n    const history = useHistory();\r\n    const [Questions, setQuestions] = useState([{}])\r\n    const [QuesionsQuiz, setQuestionsQuiz] = useState(\"\")\r\n    const [QuestionsNumber, setQuestionsNumber] = useState(0);\r\n    const [Result100, setResult100] = useState(0);\r\n    const [Result80, setResult80] = useState(0);\r\n    const [Result60, setResult60] = useState(0);\r\n    const [Result40, setResult40] = useState(0);\r\n    const [Result0, setResult0] = useState(0);\r\n    const [ResultImage, setResultImage] = useState([])\r\n    const [currentQuestion, setCurrentQuestion] = useState(0);\r\n    const [showScore, setShowScore] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const progressBar = (currentQuestion) / (QuestionsNumber) * 100\r\n    const result = Math.ceil(score / QuestionsNumber * 100)\r\n    const [firstPage, setFirstPage] = useState(true)\r\n    const [showResult, setShowResult] = useState(false)\r\n    const [QuestionImg, setQuestionImg] = useState([])\r\n    // const [saveResult, setSaveResult] = useState(0)\r\n    // const [saveCount, setSaveCount] = useState(0)\r\n\r\n\r\n    const [wrongLists, setWrongLists] = useState([{}])\r\n\r\n\r\n    const user = useSelector(state => state.user)\r\n    const quizId = props.match.params.quizId\r\n\r\n\r\n    useEffect(() => {\r\n        Axios.get(`/api/quiz/quizs_by_id?id=${quizId}&type=single`)\r\n            .then(response => {\r\n                if (response.data.success) {\r\n                    setQuestionsNumber(response.data.quizinfo[0].quizNumValue)\r\n                    setQuestionsQuiz(response.data.quizinfo[0].quizTitleValue)\r\n                    setResult100(response.data.quizinfo[0].resultMessage100)\r\n                    setResult80(response.data.quizinfo[0].resultMessage80)\r\n                    setResult60(response.data.quizinfo[0].resultMessage60)\r\n                    setResult40(response.data.quizinfo[0].resultMessage40)\r\n                    setResult0(response.data.quizinfo[0].resultMessage0)\r\n                    setResultImage(response.data.quizinfo[0].resultImage)\r\n                    setQuestionImg(response.data.quizinfo[0].images)\r\n                    // setSaveResult(response.data.quizinfo[0].totalScore)\r\n                    // setSaveCount(response.data.quizinfo[0].countQuiz)\r\n                    const item = response.data.quizinfo[0].answer\r\n                    item.sort(() => Math.random() - 0.5)\r\n                    setQuestions(item)\r\n                } else {\r\n                    alert('퀴즈를 가져오는데 실패했습니다. 새로고침 해주세요~')\r\n                }\r\n            })\r\n    }, [quizId])\r\n\r\n    const handleAnswerButtonClick = (e) => {\r\n        const nextQuestion = currentQuestion + 1;\r\n        setCurrentQuestion(nextQuestion);\r\n        if (nextQuestion < QuestionsNumber) {\r\n            setCurrentQuestion(nextQuestion);\r\n        } else {\r\n            setShowScore(true);\r\n        };\r\n        if (e.target.value === Questions[currentQuestion].rightanswer) {\r\n            setScore(score + 1)\r\n        } else {\r\n            let wrongAnswerlist = Questions[currentQuestion].rightanswer\r\n            let wrongquestionlist = Questions[currentQuestion].quizquestion\r\n            let newwrongList = [...wrongLists, { \"quiz\": wrongquestionlist, \"answ\": wrongAnswerlist }]\r\n            setWrongLists(newwrongList)\r\n        }\r\n    };\r\n\r\n    const handleResult = () => {\r\n        setShowResult(true)\r\n        // const newResult = saveResult + result\r\n        // setSaveResult(newResult)\r\n        // const newCount = saveCount + 1\r\n        // setSaveCount(newCount)\r\n        // const body = {\r\n        //     countQuiz: saveCount,\r\n        //     totalScore: saveResult,\r\n        // }\r\n        // Axios.patch(`/api/quiz/quizs_by_id?id=${quizId}&type=single`, body)\r\n        //     .then(response => {\r\n        //         if (response.data.success) {\r\n        //             console.log(body)\r\n        //         } else {\r\n        //             alert('퀴즈 결과 표시에 실패했습니다.')\r\n        //         }\r\n        //     })\r\n    }\r\n\r\n    const dispath = useDispatch();\r\n\r\n    const cartAddHandler = () => {\r\n        // 필요한 정보를 Cart 필드에 넣어준다.\r\n        dispath(addToCart(quizId))\r\n    }\r\n\r\n\r\n    const AnswerComponent = () => {\r\n        return (\r\n            <div className='row'>\r\n                <Button onClick={handleAnswerButtonClick} className='answer mt-4' value={Questions[currentQuestion].first}>\r\n                    {Questions[currentQuestion].first}\r\n                </Button>\r\n                <Button onClick={handleAnswerButtonClick} className='answer mt-4' value={Questions[currentQuestion].second}>\r\n                    {Questions[currentQuestion].second}\r\n                </Button>\r\n                {Questions[currentQuestion].third ? (\r\n                    <Button onClick={handleAnswerButtonClick} className='answer mt-4' value={Questions[currentQuestion].third}>\r\n                        {Questions[currentQuestion].third}\r\n                    </Button>) : (<div></div>)}\r\n                {Questions[currentQuestion].fourth ? (\r\n                    <Button onClick={handleAnswerButtonClick} className='answer mt-4' value={Questions[currentQuestion].fourth}>\r\n                        {Questions[currentQuestion].fourth}\r\n                    </Button>) : (\r\n                    <div></div>\r\n                )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n    const startHandler = () => {\r\n        setFirstPage(false)\r\n    }\r\n\r\n\r\n    const ResultGraphic = () => {\r\n        return (\r\n            <div>\r\n                <img className='result-img' alt='result-img11' src={`${ResultImage[0]}`} onError={(event) => event.target.style.display = 'none'} />\r\n                <br />\r\n                {result === 100\r\n                    ? (<h1>{Result100}</h1>)\r\n                    : (80 <= result\r\n                        ? (<h1>{Result80}</h1>)\r\n                        : (60 <= result\r\n                            ? (<h1>{Result60}</h1>)\r\n                            : (40 <= result\r\n                                ? (<h1>{Result40}</h1>)\r\n                                : (<h1>{Result0}</h1>))))}\r\n                <br />\r\n                <br />\r\n                <hr />\r\n                <br />\r\n                <h1>틀린문제 리스트 입니다.</h1>\r\n                <hr />\r\n                <br />\r\n                {wrongLists.map((wrongList, i) => (\r\n                    <div key={i}>\r\n                        <h2 key={`quiz${i}`}>{wrongList.quiz}</h2>\r\n                        <h2 key={`answ${i}`}>{wrongList.answ}</h2>\r\n                        <hr />\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        )\r\n    }\r\n    const imgError = (e) => {\r\n        e.target.src = \"https://toonimagetest.s3.ap-northeast-2.amazonaws.com/raw/moduquiz.jpg\"\r\n    }\r\n\r\n    return (\r\n        <div style={{ width: '75%', margin: '3rem auto' }}>\r\n            <Row>\r\n                <Col lg={24} xs={24}>\r\n                    <div>\r\n                        {showScore ? (\r\n                            <div>\r\n                                {(user.userData && !user.userData.isAuth) ? (\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n                                        <Button onClick={() => { history.goBack() }} variant=\"primary\" size=\"lg\">뒤로가기</Button>\r\n                                    </div>\r\n                                ) : (\r\n                                    <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n                                        <Button onClick={() => { history.goBack() }} variant=\"primary\" size=\"lg\">뒤로가기</Button>\r\n                                        <Button size=\"lg\" variant=\"danger\" onClick={cartAddHandler} >퀴즈 저장하기</Button>\r\n                                    </div>\r\n                                )}\r\n                                <br />\r\n                                <br />\r\n                                <div className='result-display'>\r\n                                    <div>\r\n                                        <h1 className=\"result-text mt-5\">퀴즈가 끝났습니다.</h1>\r\n                                    </div>\r\n                                    <br />\r\n                                    <br />\r\n                                    <br />\r\n                                    <br />\r\n                                    <Button onClick={handleResult}>\r\n                                        점수 확인하기\r\n                                    </Button>\r\n                                    <br />\r\n                                    <br />\r\n                                    {showResult ? (\r\n                                        <div>\r\n                                            <div className='score-section'>\r\n                                                <h1 className=\"result-score\">{result} 점</h1>\r\n                                            </div>\r\n                                            <br />\r\n                                            <br />\r\n                                            <img alt='' src={`${Questions.resultImage}`} onError={(event) => event.target.style.display = 'none'} />\r\n                                            <br />\r\n                                            <br />\r\n                                            <ResultGraphic />\r\n                                        </div>\r\n                                    ) : (\r\n                                        null\r\n                                    )}\r\n                                </div>\r\n                                <br />\r\n                                <br />\r\n                                <br />\r\n                                <br />\r\n                            </div>\r\n                        ) : (firstPage ? (\r\n                            <div className='start-page'>\r\n                                <img className='start-img' alt={QuesionsQuiz} src={QuestionImg} onError={imgError} />\r\n                                <br />\r\n                                <br />\r\n                                <div className='quiz-name'>{QuesionsQuiz}</div>\r\n                                <br />\r\n                                <Button onClick={startHandler}>문제시작하기</Button>\r\n                                <br />\r\n                                <br />\r\n                                <br />\r\n                                <br />\r\n                            </div>\r\n                        ) : (\r\n                            <div>\r\n                                <div>\r\n                                    {(user.userData && !user.userData.isAuth) ? (\r\n                                        <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n                                            <Button onClick={() => { history.goBack() }} variant=\"primary\" size=\"lg\">뒤로가기</Button>\r\n                                        </div>\r\n                                    ) : (\r\n                                        <div style={{ display: 'flex', justifyContent: 'space-around' }}>\r\n                                            <Button onClick={() => { history.goBack() }} variant=\"primary\" size=\"lg\">뒤로가기</Button>\r\n                                            <Button size=\"lg\" variant=\"danger\" onClick={cartAddHandler} >퀴즈 저장하기</Button>\r\n                                        </div>\r\n                                    )}\r\n                                    <div className='question-count mt-4'>\r\n                                        <ProgressBar animated now={progressBar} />\r\n                                    </div>\r\n                                    <br />\r\n                                    <br />\r\n                                    <div className='question-text text-center mt-5'>{Questions[currentQuestion].quizquestion}</div>\r\n                                    <div className='container'>\r\n                                        <AnswerComponent />\r\n                                    </div>\r\n                                    <input type=\"hidden\" id=\"score\" value={score} />\r\n                                </div>\r\n                            </div>)\r\n                        )\r\n                        }\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DetailQuiz\r\n","import React from 'react'\r\nimport { Col, Card, Row, Button } from 'antd';\r\n\r\nconst { Meta } = Card;\r\n\r\n\r\nfunction UserCardBlock(props) {\r\n\r\n\r\n    const renderCards = props.quizs && props.quizs.map((quiz, index) => {\r\n        const handleImgError = (e)=>{\r\n            e.target.src = 'https://toonimagetest.s3.ap-northeast-2.amazonaws.com/raw/moduquiz.jpg';\r\n        }\r\n        return (\r\n        <Col lg={6} md={8} xs={24} key={index}>\r\n            <Card\r\n                hoverable\r\n                cover={<a href={`/quiz/${quiz._id}`}><img alt={quiz.images} style={{ width:'100%', maxHeight:'150px' }} src={quiz.images} onError={handleImgError}/></a>}\r\n            >\r\n                <Meta\r\n                    title={<a href={`/quiz/${quiz._id}`}>{quiz.quizTitleValue}</a>}\r\n                    description={<a href={`/quiz/${quiz._id}`}>{`${quiz.descriptionValue} 문제수: ${quiz.quizNumValue}`}</a>}\r\n                />\r\n                <br/>\r\n                <Button onClick={()=> props.removeItem(quiz._id)}>제거하기</Button>\r\n            </Card>\r\n        </Col>)\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ width: '90%', margin: '3rem auto' }}>\r\n\r\n                {/* Cards */}\r\n\r\n                <Row gutter={[16, 16]} >\r\n                    {renderCards}\r\n                </Row>\r\n\r\n                <br />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserCardBlock\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch } from 'react-redux';\r\nimport { getCartItems, removeCartItem } from '../../../_actions/user_actions';\r\nimport UserCardBlock from './Sections/UserCardBlock';\r\nimport { Empty } from 'antd';\r\n\r\n\r\nfunction QuizCart(props) {\r\n\r\n    const dispatch = useDispatch();\r\n    const [emptysomething, setemptysomething] = useState(true)\r\n\r\n    useEffect(() => {\r\n\r\n        let cartItems = []\r\n        // 리덕스로 user state 안에 cart 안 상품 있는지 확인\r\n        if (props.user.userData && props.user.userData.cart) {\r\n            if (props.user.userData.cart.length > 0) {\r\n                props.user.userData.cart.forEach(item => {\r\n                    cartItems.push(item.id)\r\n                })\r\n\r\n                dispatch(getCartItems(cartItems, props.user.userData.cart))\r\n\r\n            }\r\n        }\r\n    }, [props.user.userData, dispatch])\r\n\r\n\r\n    let removeFromCart = (quizId) => {\r\n        dispatch(removeCartItem(quizId))\r\n            .then(response => {\r\n                if (response.payload.quizinfo.length <= 0) {\r\n                    setemptysomething(false)\r\n                } else {\r\n                    setemptysomething(true)\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div style={{ width: '75%', margin: '3rem auto' }}>\r\n                <h1>저장한 퀴즈</h1>\r\n                <div>\r\n                    <UserCardBlock quizs={props.user.cartDetail && props.user.cartDetail.quizinfo} removeItem={removeFromCart} />\r\n                </div>\r\n            </div>\r\n            {emptysomething ?\r\n                <div></div>\r\n                :\r\n                <div>\r\n                    <br />\r\n                    <Empty />\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuizCart\r\n","import React, { useEffect, useState, useCallback } from 'react'\r\nimport axios from \"axios\";\r\nimport { Col, Card, Row, Button } from 'antd';\r\nimport SearchFeature from '../LandingPage/Sections/SearchFeature';\r\n\r\n\r\n\r\n\r\nconst { Meta } = Card;\r\n\r\nfunction MadeQuizs(props) {\r\n\r\n    const [Quizs, setQuizs] = useState([])\r\n    const [Skip, setSkip] = useState(0)\r\n    const [Limit, ] = useState(8)\r\n    const [PostSize, setPostSize] = useState(8)\r\n\r\n    const [, setSearchTerm] = useState(\"\")\r\n\r\n    const getQuiz = useCallback(async (body)=>{\r\n        await axios.post('/api/quiz/quizs_by_id', body)\r\n            .then(response=>{\r\n                if (response.data.success) {\r\n                    if(body.loadMore){\r\n                        setQuizs([...Quizs, ...response.data.quizinfo])\r\n                    } else {\r\n                        setQuizs(response.data.quizinfo)\r\n                    }\r\n                    setPostSize(response.data.postSize)\r\n                }else{\r\n                    alert('퀴즈를 가져오는데 실패하였습니다.')\r\n                }\r\n            })\r\n        },[Quizs]\r\n    )\r\n\r\n    useEffect(() => {\r\n        let body = {\r\n            skip: Skip,\r\n            limit: Limit\r\n        }\r\n\r\n        getQuiz(body)\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [Skip, Limit])\r\n\r\n    \r\n\r\n    const loadHandler = () => {\r\n\r\n        let skip = Skip + Limit\r\n\r\n        let body = {\r\n            skip: skip,\r\n            limit: Limit,\r\n            loadMore: true,\r\n        }\r\n        getQuiz(body)\r\n        setSkip(skip)\r\n    }\r\n\r\n    const renderCards = Quizs.map((quiz, index) => {\r\n        const handleImgError = (e)=>{\r\n            e.target.src = 'https://toonimagetest.s3.ap-northeast-2.amazonaws.com/raw/moduquiz.jpg';\r\n        }\r\n        return <Col lg={6} md={8} xs={24} key={index}>\r\n            <Card\r\n                hoverable\r\n                cover={<a href={`/quiz/${quiz._id}`}><img alt={quiz.images} style={{ width:'100%', maxHeight:'150px' }} src={quiz.images} onError={handleImgError}/></a>}\r\n            >\r\n                <Meta\r\n                    title={<a href={`/quiz/${quiz._id}`}>{quiz.quizTitleValue}</a>}\r\n                    description={<a href={`/quiz/${quiz._id}`}>{`${quiz.descriptionValue} 문제수: ${quiz.quizNumValue}`}</a>}\r\n                />\r\n                \r\n                <br />\r\n                <div style={{ display:\"flex\" ,justifyContent: \"space-between\" }}>\r\n                {/* <Button onClick>수정하기</Button>\r\n                <Button onClick>삭제하기</Button> */}\r\n                </div>\r\n            </Card>\r\n        </Col>\r\n    })\r\n\r\n    const updateSearchTerm = (newSearchTerm) => {\r\n\r\n\r\n        let body = {\r\n            skip: 0,\r\n            limit: Limit,\r\n            searchTerm: newSearchTerm\r\n        }\r\n\r\n        setSkip(0)\r\n        setSearchTerm(newSearchTerm)\r\n        getQuiz(body)\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{ width: '75%', margin: '3rem auto' }}>\r\n\r\n            <div style={{ textAlign: 'center' }}>\r\n                <h2> 내가 제작한 퀴즈모음 및 수정하기 </h2>\r\n            </div>\r\n            <br />\r\n\r\n            {/* Search */}\r\n            <div style={{ display: 'flex', justifyContent: 'flex-end', margin: '1rem auto' }}>\r\n                <SearchFeature\r\n                    refreshFunction={updateSearchTerm}\r\n                />\r\n            </div>\r\n\r\n\r\n\r\n            {/* Cards */}\r\n\r\n\r\n            <Row gutter={[16, 16]} >\r\n                {renderCards}\r\n            </Row>\r\n\r\n            <br />\r\n            {PostSize >= Limit &&\r\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\r\n                    <Button onClick={loadHandler}>더보기</Button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MadeQuizs","import React, { Suspense } from 'react';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"../hoc/auth\";\r\nimport { ToastContainer } from 'react-toastify';\r\n// pages for this product\r\nimport LandingPage from \"./views/LandingPage/LandingPage.js\";\r\nimport LoginPage from \"./views/LoginPage/LoginPage.js\";\r\nimport RegisterPage from \"./views/RegisterPage/RegisterPage.js\";\r\nimport NavBar from \"./views/NavBar/NavBar\";\r\nimport Footer from \"./views/Footer/Footer\"\r\nimport QuestionTest from './views/Quiz/QuestionTest'\r\nimport UploadQuiz from './views/UploadQuiz/UploadQiuz'\r\nimport UploadAnswer from './views/UploadQuiz/UploadAnswer';\r\nimport DetailQuiz from './views/DetailQuizPage/DetailQuiz';\r\nimport QuizCart from './views/QuizCart/QuizCart';\r\nimport MadeQuizs from './views/MadeQuizs/MadeQuizs';\r\n\r\n\r\n//null   Anyone Can go inside\r\n//true   only logged in user can go inside\r\n//false  logged in user can't go inside\r\n\r\nfunction App() {\r\n  return (\r\n    <Suspense fallback={(<div>Loading...</div>)} style={{ maxWidth: 800, margin: \"auto\" }}>\r\n      <ToastContainer />\r\n      <NavBar />\r\n      <div style={{ paddingTop: '69px', minHeight: 'calc(100vh - 80px)' }}>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Auth(LandingPage, null)} />\r\n          <Route exact path=\"/quiz\" component={Auth(QuestionTest, null)} />\r\n          <Route exact path=\"/loginme\" component={Auth(LoginPage, false)} />\r\n          <Route exact path=\"/registerme\" component={Auth(RegisterPage, false)} />\r\n          <Route exact path=\"/quiz/upload\" component={Auth(UploadQuiz, true)} />\r\n          <Route exact path=\"/answer/upload\" component={Auth(UploadAnswer, true)} />\r\n          <Route exact path=\"/quiz/:quizId\" component={Auth(DetailQuiz, null)} />\r\n          <Route exact path=\"/user/quizcart\" component={Auth(QuizCart, true)} />\r\n          <Route exact path=\"/madequizs\" component={Auth(MadeQuizs, true)} />\r\n        </Switch>\r\n      </div>\r\n      <Footer />\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport user from './user_reducer';\n\nconst rootReducer = combineReducers({\n    user,\n});\n\nexport default rootReducer;","import {\n    LOGIN_USER,\n    REGISTER_USER,\n    AUTH_USER,\n    LOGOUT_USER,\n    ADD_TO_CART,\n    GET_CART_ITEMS,\n    REMOVE_CART_ITEM,\n} from '../_actions/types';\n\n\nexport default function (state = {}, action) {\n    switch (action.type) {\n        case REGISTER_USER:\n            return { ...state, register: action.payload }\n        case LOGIN_USER:\n            return { ...state, loginSucces: action.payload }\n        case AUTH_USER:\n            return { ...state, userData: action.payload }\n        case LOGOUT_USER:\n            return { ...state }\n        case ADD_TO_CART:\n            return {\n                ...state,\n                userData: {\n                    ...state.userData,\n                    cart: action.payload\n                }\n            }\n        case GET_CART_ITEMS:\n            return { ...state, cartDetail: action.payload }\n        case REMOVE_CART_ITEM:\n            return {\n                ...state, cartDetail: action.payload.quizinfo,\n                userData: {\n                    ...state.userData,\n                    cart: action.payload.cart\n                }\n            }\n        // case ADD_TO_HISTORY:\n        //     return {\n        //         ...state,\n        //         userData: {\n        //             ...state.userData,\n        //             cart: action.payload\n        //         }\n        //     }\n        default:\n            return state;\n    }\n}","import 'react-app-polyfill/ie9';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'core-js';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport Reducer from './_reducers';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport promiseMiddleware from 'redux-promise';\r\nimport ReduxThunk from 'redux-thunk';\r\n\r\nconst createStoreWithMiddleware = applyMiddleware(promiseMiddleware, ReduxThunk)(createStore);\r\n\r\nReactDOM.render(\r\n    <Provider\r\n        store={createStoreWithMiddleware(\r\n            Reducer,\r\n            window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n            window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )}\r\n    >\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}